import React, { useEffect, useState } from 'react'
import Form from '../components/Form.jsx'
import ImageCard from '../components/ImageCard'
import Loading from '../components/Loading'
import { dumyList } from '../helpers/dumy.js'


function RenderCards({ data, title }) {
  if (data?.length) {
    return data.map(post => <ImageCard key={post._id} {...post} />)
  }
  return <h2 className='text-rose-700 text-xl font-bold uppercase mt-5'>{title}</h2>
}

export default function Home() {


  const [loading, setLoading] = useState(false)
  const [allPosts, setAllPosts] = useState(dumyList)
  const [searchText, setSearchText] = useState('')
  const [searchResults, setSearchResults] = useState([])
  const [searchTimeOut, setSearchTimeOut] = useState(null)
  const [alert, setAlert] = useState('')

  async function getAllPosts() {
    try {
      setLoading(true)
      const response = await fetch(
        'http://localhost:5000/api/v1/post',
        {
          method: "GET",
          headers: { 'Content-type': 'application/json' }
        }
      )

      if (response.ok) {
        const result = await response.json()
        setAllPosts(result.posts.reverse())
      }

    } catch (error) {
      setAlert('server or connection error')
      setTimeout(() => setAlert(''), 2000)
      console.log(error);
    } finally {
      setLoading(false)
    }
  }

  function handleSearchChange(event) {
    clearTimeout(searchTimeOut)
    const enteredText = event.target.value;
    setSearchText(enteredText)
    setSearchTimeOut(
      setTimeout(() => {
        const searchResults = allPosts.filter((post) => {
          const isNameHasSearch = post.name.toLowerCase().includes(enteredText.toLowerCase());
          const isPromptHasSearch = post.prompt.toLowerCase().includes(enteredText.toLowerCase());
          
          
          return isNameHasSearch || isPromptHasSearch;
        })
        setSearchResults(searchResults)
      }, 500)
    )
  }

  useEffect(() => {
    getAllPosts()
  }, [])

  return <>
    <main className='max-w-7xl mx-auto pb-10'>

    <main className='max-w-4xl'>
      <div className={`fixed bottom-8 right-8 z-50 max-w-sm transition-all duration-500 ${alert ? 'opacity-100' : 'opacity-0'} `}>
        <div className={`bg-black flex items-center justify-center w-fit rounded-3xl`}>
          <div className="px-4 py-5 text-sm text-white rounded-3xl bg-red-800 ">
            ALERT
          </div>
          <div className={`${alert ? 'pl-3 pr-5' : 'opacity-100'} line-clamp-3 text-sm`}>
            {alert}
          </div>
        </div>
      </div>


      <h1 className='text-3xl font-extrabold pb-2'>Community Showcase</h1>
      <p className='opacity-50'>Browse a great collection of the community AI generated images that is generated by DALL-E Clone</p>

      <section className='pt-8'>
        <Form
          label="Search Post"
          type="text"
          name="text"
          placeholder="Search Post....."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </section>
      
    </main>


      <section className='pt-10'>
        {
          loading
            ? <div className='mt-[-30px]'><Loading /></div>
            : <div>
              {
                searchText &&
                <h2 className='text-md mb-4'>
                  Showing results for: <span className='text-rose-400'>{searchText}</span>
                </h2>
              }
              <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
                {
                  searchText
                    ? <RenderCards data={searchResults} title='No Results Found' />
                    : <RenderCards data={allPosts} title='No Posts Found' />
                }
              </div>
            </div>
        }
      </section>

    </main>
  </>
}
